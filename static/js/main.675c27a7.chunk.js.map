{"version":3,"sources":["logo.svg","components/CardHolder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","myText","textDecoration","SimpleCard","props","classes","Card","className","CardContent","Typography","color","gutterBottom","product","Manufacturer","variant","component","name","special_price","price","sku","CardActions","App","onTagsChange","event","values","setState","selectedProduct","target","value","length","result","state","productData","filter","RegExp","test","autocompleData","myChangeHandler","console","log","Autocomplete","id","options","this","getOptionLabel","option","style","width","onChange","renderInput","params","TextField","label","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mx1zEAAAA,EAAOC,QAAU,IAA0B,kC,+MCQrCC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,IAEhBC,OAAQ,CACND,aAAc,GACdE,eAAgB,kBAIL,SAASC,EAAWC,GACjC,IAAMC,EAAUhB,IACcgB,EAAQZ,OAEtC,OACE,kBAACa,EAAA,EAAD,CAAMC,UAAWF,EAAQd,MACvB,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,UAAWF,EAAQR,MAAOa,MAAM,gBAAgBC,cAAY,GAAxE,YACYP,EAAMQ,QAAQC,cAE1B,kBAACJ,EAAA,EAAD,CAAYK,QAAQ,KAAKC,UAAU,MAEhCX,EAAMQ,QAAQI,MAEjB,kBAACP,EAAA,EAAD,CAAYK,QAAQ,KAAKC,UAAU,MAAnC,SAEIX,EAAMQ,QAAQK,eAElB,kBAACR,EAAA,EAAD,CAAYF,UAAWF,EAAQJ,OAAQS,MAAM,iBAA7C,SACIN,EAAMQ,QAAQM,OAElB,kBAACT,EAAA,EAAD,CAAYK,QAAQ,QAAQC,UAAU,KAAtC,QACQX,EAAMQ,QAAQO,IACpB,6BACC,yBAGL,kBAACC,EAAA,EAAD,O,kBCwCSC,E,kDA3Eb,WAAYjB,GAAO,IAAD,8BAGhB,cAAMA,IAQRkB,aAAe,SAACC,EAAOC,GAWnB,GALGA,GACD,EAAKC,SAAS,CACZC,gBAAiBF,IAGjBD,EAAMI,OAAOC,SAGdL,EAAMI,OAAOC,MAAMC,QAAU,GAAhC,CAGA,IAAMC,EAAS,EAAKC,MAAMC,YAAYC,QAAO,SAAArB,GAI3C,OAFc,IAAIsB,OAAOX,EAAMI,OAAOC,MAAO,KAEhCO,KAAKvB,EAAQI,SAI5B,EAAKS,SAAS,CACZW,eAAgBN,MArCJ,EA0ClBO,gBAAkB,SAACd,GACjBe,QAAQC,IAAIhB,EAAMI,OAAOC,QAvCzB,EAAKG,MAAQ,CACXC,YAAaA,EACbI,eAAgB,GAChBV,gBAAiB,IAPH,E,qDA6CT,IAAD,OAEN,OAEE,yBAAKnB,UAAU,OAEd,kBAACiC,EAAA,EAAD,CACDC,GAAG,iBACHC,QAASC,KAAKZ,MAAMK,eACpBQ,eAAgB,SAACC,GAAD,OAAYA,EAAO7B,MACnC8B,MAAO,CAAEC,MAAO,KAChBC,SAAUL,KAAKrB,aACf2B,YAAa,SAACC,GAAD,OAAY,kBAACC,EAAA,EAAD,eAAWH,SAAU,EAAK1B,cAAkB4B,EAA5C,CAAoDE,MAAM,gBAAgBtC,QAAQ,iBAI3G,kBAAC,EAAD,CAAYF,QAAS+B,KAAKZ,MAAML,uB,GA/DpB2B,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.675c27a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  myText: {\n    marginBottom: 12,\n    textDecoration: 'line-through'\n  }\n});\n\nexport default function SimpleCard(props) {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Made by: {props.product.Manufacturer}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {/* be{bull}nev{bull}o{bull}lent */}\n          {props.product.name}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {/* be{bull}nev{bull}o{bull}lent */}\n          ₹{props.product.special_price}\n        </Typography>\n        <Typography className={classes.myText} color=\"textSecondary\">\n          ₹{props.product.price}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          sku: {props.product.sku}\n          <br />\n          {'\"a benevolent smile\"'}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        {/* <Button size=\"small\">Learn More</Button> */}\n      </CardActions>\n    </Card>\n  );\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// import { makeStyles } from '@material-ui/core/styles';\n// import Card from '@material-ui/core/Card';\n// import CardActions from '@material-ui/core/CardActions';\n// import CardContent from '@material-ui/core/CardContent';\n// import Button from '@material-ui/core/Button';\n// import Typography from '@material-ui/core/Typography';\nimport CardHolder from './components/CardHolder';\n\nimport './App.css';\n\nimport productData from './data.json';\n\n\nclass App extends Component {\n  \n  constructor(props){\n    // const classes = useStyles();\n    // const bull = <span className={classes.bullet}>•</span>;\n    super(props)\n    this.state = {\n      productData: productData,\n      autocompleData: [],\n      selectedProduct: {}\n    }\n    // this.handleChange = this.handleChange.bind(this)\n  }\n  onTagsChange = (event, values) => {\n   \n      // This will output an array of objects\n      // given by Autocompelte options property.\n      // console.log('values',values)\n      // console.log(event.target.value);\n      if(values){\n        this.setState({\n          selectedProduct: values\n        })\n      }\n      if(!event.target.value){\n        return\n      }\n      if(event.target.value.length <= 3){\n        return;\n      }\n      const result = this.state.productData.filter(product => {\n       \n        const regex = new RegExp(event.target.value, 'i');\n        // console.log('product', regex.test(product.name))\n        return regex.test(product.name)\n      \n      });\n      // console.log('RESULT -', result);\n      this.setState({\n        autocompleData: result\n      })\n    \n  }\n\n  myChangeHandler = (event) => {\n    console.log(event.target.value);\n  }\n  render(){\n    \n    return(\n     \n      <div className=\"App\">\n        \n       <Autocomplete\n      id=\"combo-box-demo\"\n      options={this.state.autocompleData}\n      getOptionLabel={(option) => option.name}\n      style={{ width: 300 }}\n      onChange={this.onTagsChange}\n      renderInput={(params) => <TextField onChange={this.onTagsChange} {...params} label=\"enter 4 chars\" variant=\"outlined\" />}\n    />\n      \n      \n      <CardHolder product={this.state.selectedProduct} />\n      \n      \n\n      </div>\n    )\n  }\n\n  \n  \n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}